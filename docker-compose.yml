services:
  api-gateway:
    image: charmflex/microservices-grocery-api-gateway:latest
    ports:
      - "9000:9000"
    environment:
      GATEWAY_AUTH_SECRET: ${GATEWAY_AUTH_SECRET}

  identity-service:
    image: charmflex/microservices-grocery-auth-service:latest
    ports:
      - "3001:3001"
    environment:
      GATEWAY_AUTH_SECRET: ${GATEWAY_AUTH_SECRET}
      POSTGRES_USER: ${POSTGRES_USER_AUTH}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD_AUTH}


  inventory-service:
    image: charmflex/microservices-grocery-inventory-service:latest
    ports:
      - "3002:3002"
    environment:
      GATEWAY_AUTH_SECRET: ${GATEWAY_AUTH_SECRET}
      POSTGRES_USER: ${POSTGRES_USER_INVENTORY}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD_INVENTORY}


  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000



  broker:
    image: confluentinc/cp-kafka:7.5.0
    container_name: broker
    ports:
      - "9092:9092"
      - "29092:29092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8086:8080"
    depends_on:
      - broker
    environment:
      KAFKA_CLUSTERS_NAME: local
      KAFKA_CLUSTERS_BOOTSTRAPSERVERS: broker:29092
      #      KAFKA_CLUSTERS_SCHEMAREGISTRY: http://schema-registry:8081
      DYNAMIC_CONFIG_ENABLED: 'true'

  db:
    image: "postgres:17"
    ports:
      - "5434:5432"
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_v17_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}", ]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 15s
    logging:
      options:
        max-size: 10m

volumes:
  postgres_v17_data:

